{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","Number","floor","JSON","stringify","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","asPromise","fs","inquire","filename","options","callback","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","writeFloat_ieee754","writeUint","val","buf","pos","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeFloat_f32_cpy","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","f64","le","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","Float32Array","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","common","commonRe","name","json","nested","google","Any","fields","type_url","type","id","Duration","timeType","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","FieldMask","paths","get","file","converter","Enum","util","genValuePartial_fromObject","field","fieldIndex","propName","m","d","_types","ksi","ksiFlag","resolvedType","prop","repeated","typeDefault","TypeError","fullName","fromObject","isUnsigned","Long","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","newBuffer","genValuePartial_toObject","o","enums","toObject","isFinite","longs","bytes","mtype","fieldsArray","ctor","map","ks","_i","merge","copy","isArray","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","arrays","defaults","objects","arrayDefault","valuesById","long","ks2","_fieldsArray","indexOf","hasOwnProperty","Reader","types","_util","r","l","create","uint32","group","fieldId","find","emptyObject","k","tag2","basic","skipType","longToHash","packed","rfield","required","ProtocolError","instance","Writer","message","writer","wireType","ref","fork","mapKey","ldelim","optional","ReflectionObject","constructor","className","Namespace","comment","comments","reserved","fromJSON","enm","toJSON","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","Type","ruleRe","extend","isObject","toLowerCase","defaultValue","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","parent","lookupTypeOrEnum","fromNumber","freeze","emptyArray","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","build","load","root","Root","loadSync","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","configure","BufferWriter","BufferReader","rpc","roots","tokenize","parse","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","parsedOptions","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","names","methods","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","setParsedOption","newValue","newOpt","opt","setProperty","Root_","fieldNames","addFieldsToParent","oneofName","oneOfGetter","set","oneOfSetter","keepCase","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","pkg","imports","weakImports","syntax","token","preferTrailingComment","tn","alternateCommentMode","next","peek","skip","cmnt","head","isProto3","applyCase","camelCase","illegal","insideTryCatch","line","readString","readValue","acceptTypeRef","substring","parseFloat","parseNumber","readRanges","target","acceptStrings","parseId","acceptNegative","parseCommon","parseOption","ifBlock","valueType","parseInlineOptions","parseMapField","parseField","parseOneOf","extensions","parseType","dummy","parseEnumValue","parseEnum","service","commentText","method","parseMethod","parseService","reference","parseExtension","fnIf","fnElse","trailingLine","lcFirst","ucFirst","parseGroup","isCustom","option","substr","optionValue","parseOptionValue","result","prevValue","concat","simpleValue","parsePackage","whichImports","parseImport","parseSyntax","package","indexOutOfRange","writeLength","RangeError","Buffer","isBuffer","create_array","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","int32","sint32","bool","fixed32","sfixed32","float","double","BufferReader_","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","resolvePath","self","sync","finish","cb","getBundledFileName","idx","lastIndexOf","altname","process","parsed","queued","weak","setTimeout","readFileSync","isNode","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","methodName","isReserved","q","s","delimRe","stringDoubleRe","stringSingleRe","setCommentRe","setCommentAltRe","setCommentSplitRe","whitespaceRe","unescapeRe","unescapeMap","0","unescape","str","commentType","commentLine","commentLineEmpty","commentIsLeading","stack","stringDelim","subject","charAt","setComment","isLeading","commentOffset","lines","trim","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","lineText","cursor","re","lastIndex","match","exec","repeat","curr","isDoc","isLeadingComment","expected","actual","ret","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","filter","setup","wrapper","originalThis","typeName","bake","key","safePropBackslashRe","safePropQuoteRe","safeProp","toUpperCase","camelCaseRe","a","decorateRoot","enumerable","decorateEnumIndex","dst","setProp","zero","zzEncode","zeroHash","from","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","src","newError","CustomError","captureStackTrace","pool","global","versions","node","window","isset","isSet","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longFromHash","fromBits","attr","newObj","fieldMap","encoding","allocUnsafe","invalidDes","seenFirstField","invalid","genVerifyKey","genVerifyValue","oneofPropName","messageName","Op","noop","State","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","byteLength","$require","$module","amd","isLong"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\r\n    // so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    var protobuf = $require(entries[0]);\r\n\r\n    // Expose globally\r\n    protobuf.util.global.protobuf = protobuf;\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"field_mask\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FieldMask message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FieldMask: {\r\n        fields: {\r\n            paths: {\r\n                rule: \"repeated\",\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(37);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} propName Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(field, fieldIndex, propName,options) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var m       = options['m'];\r\n    var d       = options['d'];\r\n    var _types  = options['types'];\r\n    var ksi     = options['ksi'];\r\n    var ksiFlag = typeof ksi != 'undefined';\r\n    if(field.resolvedType){\r\n        if(field.resolvedType instanceof Enum){\r\n            var prop = ksiFlag ? d[propName][ksi] : d[propName];\r\n            var values = field.resolvedType.values,\r\n                keys = Object.keys(values);\r\n            for (var i = 0; i < keys.length; i++){\r\n                if(field.repeated && values[keys[i]] === field.typeDefault){\r\n                    continue;\r\n                }\r\n                if(keys[i] == prop || values[keys[i]] == prop){\r\n                    ksiFlag ?\r\n                        m[propName][ksi] = values[keys[i]] :\r\n                        m[propName] = values[keys[i]];\r\n                    break\r\n                }\r\n            }\r\n        }else {\r\n            if(typeof (ksiFlag ? d[propName][ksi] : d[propName]) !== 'object')\r\n                throw TypeError(field.fullName + \": object expected\");\r\n            ksiFlag ?\r\n                m[propName][ksi] = _types[fieldIndex].fromObject(d[propName][ksi]):\r\n                m[propName] = _types[fieldIndex].fromObject(d[propName]);\r\n        }\r\n    } else {\r\n        var  isUnsigned = false;\r\n        switch (field.type){\r\n            case \"double\":\r\n            case \"float\":\r\n                ksiFlag ?\r\n                    m[propName][ksi] = Number(d[propName][ksi]) :\r\n                    m[propName] = Number(d[propName]);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\":\r\n                ksiFlag ?\r\n                    m[propName][ksi] = d[propName][ksi] >>> 0:\r\n                    m[propName] = d[propName] >>> 0;\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\":\r\n                ksiFlag ?\r\n                    m[propName][ksi] = d[propName][ksi] | 0 :\r\n                    m[propName] = d[propName] |0;\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n            // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\":\r\n                if(util.Long)\r\n                    ksiFlag ?\r\n                        (m[propName][ksi] = util.Long.fromValue(d[propName][ksi])).unsigned = isUnsigned :\r\n                        (m[propName] = util.Long.fromValue(d[propName])).unsigned = isUnsigned;\r\n                else if(typeof (ksiFlag ? d[propName][ksi] : d[propName]) === 'string')\r\n                    ksiFlag ?\r\n                        m[propName][ksi] =parseInt(d[propName][ksi], 10) :\r\n                        m[propName] =parseInt(d[propName], 10);\r\n                else if(typeof (ksiFlag ? d[propName][ksi] : d[propName]) === 'number')\r\n                    ksiFlag ?\r\n                        m[propName][ksi] = d[propName][ksi] :\r\n                        m[propName] = d[propName];\r\n                else if(typeof (ksiFlag ? d[propName][ksi] : d[propName]) === 'object')\r\n                    ksiFlag ?\r\n                        m[propName][ksi] = new util.LongBits(d[propName][ksi].low >>> 0, d[propName][ksi].high >>> 0).toNumber(isUnsigned) :\r\n                        m[propName] = new util.LongBits(d[propName].low >>> 0, d[propName].high >>> 0).toNumber(isUnsigned);\r\n                break;\r\n            case \"bytes\":\r\n                if(typeof (ksiFlag ? d[propName][ksi] : d[propName]) ===\"string\")\r\n                    ksiFlag ?\r\n                        util.base64.decode(d[propName][ksi],m[propName][ksi]=util.newBuffer(util.base64.length(d[propName][ksi])),0) :\r\n                        util.base64.decode(d[propName],m[propName]=util.newBuffer(util.base64.length(d[propName])),0);\r\n                else if((ksiFlag ? d[propName][ksi] : d[propName]).length)\r\n                    ksiFlag?\r\n                        m[propName][ksi]=d[propName][ksi] :\r\n                        m[propName]=d[propName];\r\n                break;\r\n            case \"string\":\r\n                ksiFlag?\r\n                    m[propName][ksi]=String(d[propName][ksi]) :\r\n                    m[propName]=String(d[propName]);\r\n                break;\r\n            case \"bool\":\r\n                ksiFlag?\r\n                    m[propName][ksi]=Boolean(d[propName][ksi]):\r\n                    m[propName]=Boolean(d[propName]);\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    return function (options){\r\n        return function (d){\r\n            if(d instanceof this.ctor)\r\n                return d;\r\n            if(!fields.length)\r\n                return new  this.ctor;\r\n\r\n            var  m = new this.ctor;\r\n            for (var i = 0; i < fields.length; ++i){\r\n                var field       = fields[i].resolve();\r\n                var propName    = field.name;\r\n                var _i;\r\n                if(field.map){\r\n                    if(d[propName]){\r\n                        if(typeof d[propName] !== 'object')\r\n                            throw TypeError(field.fullName + \": object expected\");\r\n                        m[propName] = {};\r\n                    }\r\n                    var ks = Object.keys(d[propName]);\r\n                    for ( _i = 0; _i<ks.length ; ++_i)\r\n                        genValuePartial_fromObject(field, i, propName, util.merge(util.copy(options), {m:m,d:d,ksi : ks[_i]}));\r\n                }else if(field.repeated){\r\n                    if(d[propName]){\r\n                        if(!Array.isArray(d[propName]))\r\n                            throw TypeError(field.fullName + \": array expected\");\r\n                        m[propName] = [];\r\n                        for (_i = 0; _i < d[propName].length; ++_i) {\r\n                            genValuePartial_fromObject(field, i, propName, util.merge(util.copy(options), {\r\n                                m: m,\r\n                                d: d,\r\n                                ksi: _i\r\n                            }));\r\n                        }\r\n                    }\r\n                }else {\r\n                    if((field.resolvedType instanceof Enum) || d[propName]!=null){\r\n                        genValuePartial_fromObject(field,i,propName, util.merge(util.copy(options), {m:m,d:d}));\r\n                    }\r\n                }\r\n            }\r\n            return m;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} propName Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(field, fieldIndex, propName,options) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var m       = options['m'];\r\n    var d       = options['d'];\r\n    var _types  = options['types'];\r\n    var ksi     = options['ksi'];\r\n    var o       = options['o'];\r\n    var ksiFlag = typeof ksi != 'undefined';\r\n    if(field.resolvedType){\r\n        if (field.resolvedType instanceof  Enum)\r\n            ksiFlag ?\r\n                (d[propName][ksi] = o.enums===String?_types[fieldIndex].values[m[propName][ksi]]:m[propName][ksi]) :\r\n                (d[propName] = o.enums===String?_types[fieldIndex].values[m[propName]]:m[propName]);\r\n        else\r\n            ksiFlag ?\r\n                d[propName][ksi] = _types[fieldIndex].toObject(m[propName][ksi], o) :\r\n                d[propName] = _types[fieldIndex].toObject(m[propName], o);\r\n    }else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":\r\n                ksiFlag ? (d[propName][ksi] = o.json && !isFinite(m[propName][ksi])? String(m[propName][ksi]):m[propName][ksi]) :\r\n                    (d[propName] = o.json && !isFinite(m[propName])? String(m[propName]):m[propName]);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n            // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\":\r\n                if(typeof m[propName][ksi] === 'number')\r\n                    ksiFlag ?\r\n                        (d[propName][ksi] = o.longs === String ? String(m[propName][ksi]) : m[propName][ksi]) :\r\n                        (d[propName] = o.longs === String ? String(m[propName]) : m[propName]);\r\n                else\r\n                    ksiFlag ?\r\n                        (d[propName][ksi] =\r\n                            o.longs === String ?\r\n                                util.Long.prototype.toString.call(m[propName][ksi]) :\r\n                                o.longs === Number ? new  util.LongBits(m[propName][ksi].low >>> 0, m[propName][ksi].high >>> 0).toNumber(isUnsigned) : m[propName][ksi]):\r\n                        (d[propName] =\r\n                            o.longs === String ?\r\n                                util.Long.prototype.toString.call(m[propName]) :\r\n                                o.longs === Number ? new  util.LongBits(m[propName].low >>> 0, m[propName].high >>> 0).toNumber(isUnsigned) : m[propName]);\r\n                break;\r\n            case \"bytes\":\r\n                ksiFlag?\r\n                    (d[propName][ksi] =\r\n                        o.bytes === String ?\r\n                            util.base64.encode(m[propName][ksi], 0, m[propName][ksi].length) :\r\n                            o.bytes === Array ? Array.prototype.slice.call(m[propName][ksi]) : m[propName][ksi]):\r\n                    (d[propName] =\r\n                        o.bytes === String ?\r\n                            util.base64.encode(m[propName], 0, m[propName].length) :\r\n                            o.bytes === Array ? Array.prototype.slice.call(m[propName]) : m[propName]);\r\n                break;\r\n            default:\r\n                ksiFlag ? d[propName][ksi] = m[propName][ksi] : d[propName] = m[propName];\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    return function (options){\r\n        if(!fields.length)\r\n            return function (){\r\n                return {};\r\n            };\r\n        return function (m, o){\r\n            o = o || {};\r\n            var d = {};\r\n            var repeatedFields = [],\r\n                mapFields = [],\r\n                normalFields = [],\r\n                field,\r\n                propName,\r\n                i = 0;\r\n            for (; i < fields.length; ++i)\r\n                if (!fields[i].partOf)\r\n                    ( fields[i].resolve().repeated ? repeatedFields\r\n                        : fields[i].map ? mapFields\r\n                            : normalFields).push(fields[i]);\r\n\r\n            if (repeatedFields.length) {\r\n                if(o.arrays || o.defaults ){\r\n                    for (i = 0; i < repeatedFields.length; ++i)\r\n                        d[repeatedFields[i].name] = [];\r\n                }\r\n            }\r\n\r\n            if (mapFields.length) {\r\n                if(o.objects || o.defaults){\r\n                    for  (i = 0; i < mapFields.length; ++i)\r\n                        d[mapFields[i].name] = {};\r\n                }\r\n            }\r\n\r\n            if(normalFields.length){\r\n                if(o.defaults){\r\n                    for (i = 0; i < normalFields.length; ++i){\r\n                        field       = normalFields[i],\r\n                            propName    = field.name;\r\n                        if(field.resolvedType instanceof Enum)\r\n                            d[propName] = o.enums === String ? field.resolvedType.valuesById[field.typeDefault] : field.typeDefault;\r\n                        else if(field.long){\r\n                            if(util.Long){\r\n                                var n = new util.Long(field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned);\r\n                                d[propName] = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber():n;\r\n                            }else {\r\n                                d[propName] = o.longs === String ? field.typeDefault.toString() : field.typeDefault.toNumber();\r\n                            }\r\n                        }else if(field.bytes){\r\n                            var arrayDefault=Array.prototype.slice.call(field.typeDefault);\r\n                            if(o.bytes === String){\r\n                                d[propName]=String.fromCharCode.apply(String, field.typeDefault)\r\n                            }else{\r\n                                d[propName]=arrayDefault;\r\n                                if(o.bytes!==Array){\r\n                                    d[propName]=util.newBuffer(d[propName]);\r\n                                }\r\n                            }\r\n                        }else {\r\n                            d[propName] =field.typeDefault;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n            var hasKs2 = false;\r\n            for (i = 0; i < fields.length; ++i){\r\n                field       = fields[i];\r\n                propName    = field.name;\r\n                var index   = mtype._fieldsArray.indexOf(field);\r\n                var ks2;\r\n                var  j;\r\n                if(field.map){\r\n                    if (!hasKs2){\r\n                        hasKs2 = true;\r\n                    }\r\n                    if (m[propName]&&(ks2 = Object.keys(m[propName])).length){\r\n                        d[propName] = {};\r\n                        for (j = 0; j < ks2.length; ++j){\r\n                            genValuePartial_toObject (field, index, propName, util.merge(util.copy(options), {m:m,d:d,ksi :ks2[j],o:o}));\r\n                        }\r\n                    }\r\n                }else if(field.repeated){\r\n                    if(m[propName]&&m[propName].length){\r\n                        d[propName] = [];\r\n                        for (j = 0; j < m[propName].length; ++j){\r\n                            genValuePartial_toObject(field, index, propName, util.merge(util.copy(options), {m:m,d:d,ksi:j,o:o}))\r\n                        }\r\n                    }\r\n                }else {\r\n                    if(m[propName]!=null&& (m.hasOwnProperty(propName)/*|| field.partOf*/)){\r\n                        genValuePartial_toObject(field, index, propName, util.merge(util.copy(options), {m:m,d:d,o:o}))\r\n                    }\r\n                    if(field.partOf) {\r\n                        if (o.oneofs)\r\n                            d[field.partOf.name] = propName;\r\n                    }\r\n                }\r\n            }\r\n            return d;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(36),\r\n    util    = require(37);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    return function (options){\r\n        var Reader = options.Reader;\r\n        var _types = options.types;\r\n        var _util   = options.util;\r\n        return function (r, l){\r\n            if(!(r instanceof Reader))\r\n                r = Reader.create(r);\r\n            var c = l === undefined ? r.len : r.pos + l,\r\n                m = new this.ctor;\r\n            var k,value;\r\n            while (r.pos < c){\r\n                var t = r.uint32();\r\n                if (mtype.group){\r\n                    if((t&7) === 4)\r\n                        break;\r\n                }\r\n                var fieldId = t>>>3;\r\n                var i = 0;\r\n                var find = false;\r\n                for (; i < mtype.fieldsArray.length; ++i){\r\n                    var field = mtype._fieldsArray[i].resolve(),\r\n                        name  = field.name,\r\n                        type  = field.resolvedType instanceof Enum ? \"int32\" : field.type;\r\n                    //ref   = m[field.name];    //下面有赋值,不能直接用ref 还不如用m[name]\r\n                    if (fieldId != field.id) continue;\r\n                    find = true;\r\n                    if (field.map){\r\n                        // r.skip().pos++;\r\n                        if(m[name] === _util.emptyObject)\r\n                            m[name] = {};\r\n                        var c2=r.uint32()+r.pos;\r\n                        if(types.defaults[field.keyType]!==undefined)\r\n                            k=types.defaults[field.keyType];\r\n                        else\r\n                            k=null;\r\n                        if(types.defaults[type]!==undefined)\r\n                            value=types.defaults[type];\r\n                        else\r\n                            value=null;\r\n                        while (r.pos<c2){\r\n                            var tag2=r.uint32();\r\n                            switch (tag2>>>3){\r\n                                case 1: k=r[field.keyType]();break;\r\n                                case 2:\r\n                                    if(types.basic[type] === undefined)\r\n                                        value=_types[i].decode(r,r.uint32()); // can't be groups\r\n                                    else\r\n                                        value=r[type]();\r\n                                    break;\r\n                                default:\r\n                                    r.skipType(tag2&7);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        if(types.long[field.keyType]!==undefined)\r\n                            m[name][typeof k ==='object' ? _util.longToHash(k):k]=value;\r\n                        else\r\n                            m[name][k]=value;\r\n\r\n                    }else if(field.repeated){\r\n                        if(!(m[name] && m[name].length)){\r\n                            m[name] = [];\r\n                        }\r\n\r\n                        if(types.packed[type] !== undefined && (t&7) === 2){\r\n                            var c2 = r.uint32()+ r.pos;\r\n                            while (r.pos < c2)\r\n                                m[name].push(r[type]())\r\n                        }else {\r\n                            if(types.basic[type] === undefined){\r\n                                field.resolvedType.group ?\r\n                                    m[name].push(_types[i].decode(r)) :\r\n                                    m[name].push(_types[i].decode(r, r.uint32()))\r\n\r\n                            }else {\r\n                                m[name].push(r[type]());\r\n                            }\r\n                        }\r\n                    }else if (types.basic[type] === undefined){\r\n                        if(field.resolvedType.group){\r\n                            m[name] = _types[i].decode(r);\r\n                        }else {\r\n                            m[name] = _types[i].decode(r, r.uint32());\r\n                        }\r\n                    }else {\r\n                        //console.log(\"m\",JSON.stringify(m),\"type\",type,\"field\",field);\r\n                        m[name] = r[type]();\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                if(!find){\r\n                    console.log(\"t\",t);\r\n                    r.skipType(t&7)\r\n                }\r\n\r\n            }\r\n\r\n            for (i = 0; i < mtype._fieldsArray.length; ++ i){\r\n                var rfield = mtype._fieldsArray[i];\r\n                if(rfield.required){\r\n                    if(!m.hasOwnProperty(rfield.name)){\r\n                        throw util.ProtocolError(missing(rfield),{instance:m})\r\n                    }\r\n                }\r\n            }\r\n            //mtype.fieldsArray.filter(function(field) { return field.map; }).length\r\n            return m;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(36),\r\n    util     = require(37);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    return function (options){\r\n        var Writer = options.Writer;\r\n        var _types  = options.types;\r\n        var util   = options.util;\r\n        return function (message, writer) {\r\n            writer = writer || Writer.create();\r\n            var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var field = fields[i];\r\n                var index = mtype._fieldsArray.indexOf(field);\r\n\r\n                var type = field.resolvedType instanceof Enum ? 'uint32' : field.type;\r\n                var wireType = types.basic[type];\r\n                var ref      = message[field.name];\r\n                //此处增加枚举型替换,有可能外界传入的枚举是string,转换成number\r\n                if(field.resolvedType instanceof Enum && typeof ref === 'string'){\r\n                    ref = _types[index]['values'][ref];\r\n                }\r\n\r\n                //正式进行序列化\r\n                if (field.map) {//有待验证\r\n                    if(ref != null && Object.hasOwnProperty.call(message,field.name)){\r\n                        for (var  ks =Object.keys(ref), l = 0; l < ks.length; ++l){\r\n                            writer.uint32((field.id << 3 | 2) >>> 0).fork().uint32(8 | types.mapKey[field.keyType])[field.keyType](ks[l]);\r\n                            if(wireType === undefined ){\r\n                                _types[index].encode(ref[ks[l]], writer.uint32(18).fork()).ldelim().ldelim();\r\n                            }else {\r\n                                writer.uint32(16 | wireType)[type](ref[ks[l]]).ldelim();\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (field.repeated) {\r\n                    if (ref && ref.length) {\r\n                        if (field.packed && types.packed[type] !== undefined) {//如果数据可以被packed的话\r\n                            writer.uint32((field.id << 3 | 2) >>> 0).fork();\r\n                            for (var j = 0; j < ref.length; j++) {\r\n                                writer[type](ref[j])\r\n                            }\r\n                            writer.ldelim();\r\n                        } else {//数据不能packed的话\r\n                            for (var k = 0; k < ref.length; k++) {\r\n                                if (wireType === undefined) {//如果是一个自定义的数据类型\r\n                                    if(field.resolvedType.group){\r\n                                        _types[index].encode(ref[k],writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);\r\n                                    }else {\r\n                                        _types[index].encode(ref[k],writer.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();\r\n                                    }\r\n                                } else {//如果是string 或者 bytes\r\n                                    writer.uint32((field.id << 3 | wireType) >>> 0)[type](ref[k]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if(field.optional){\r\n                        if(ref != null && Object.hasOwnProperty.call(message,field.name)){\r\n                            if(wireType===undefined) {\r\n                                // genTypePartial(gen, field, index, ref);\r\n                                if (field.resolvedType.group)\r\n                                    _types[index].encode(ref, writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);\r\n                                else\r\n                                    _types[index].encode(ref, writer.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();\r\n                            }else{\r\n                                writer.uint32((field.id << 3 | wireType) >>> 0)[type](ref);\r\n                            }\r\n                        }\r\n                    }else{\r\n                        if(wireType===undefined) {\r\n                            // genTypePartial(gen, field, index, ref);\r\n                            if (field.resolvedType.group)\r\n                                _types[index].encode(ref, writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);\r\n                            else\r\n                                _types[index].encode(ref, writer.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();\r\n                        }else{\r\n                            writer.uint32((field.id << 3 | wireType) >>> 0)[type](ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return writer;\r\n        }\r\n    };\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(23),\r\n    util = require(37);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(36),\r\n    util  = require(37);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    if (rule === \"proto3_optional\") {\r\n        rule = \"optional\";\r\n    }\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(40);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(35);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(33);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(21);\r\nprotobuf.wrappers         = require(41);\r\n\r\n// Utility\r\nprotobuf.types            = require(36);\r\nprotobuf.util             = require(37);\r\n\r\n// Set up possibly cyclic reflection dependencies\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(42);\r\nprotobuf.BufferWriter = require(43);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(39);\r\nprotobuf.rpc          = require(31);\r\nprotobuf.roots        = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.util._configure();\r\n    protobuf.Writer._configure(protobuf.BufferWriter);\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(34);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(36),\r\n    util    = require(37);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object = object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Options properly parsed into an object\r\n     */\r\n    this.parsedOptions = parsedOptions;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n * @property {string} comment Method comments\r\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined,\r\n        \"parsedOptions\"  , this.parsedOptions,\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Field    = require(16),\r\n    OneOf    = require(25),\r\n    util     = require(37);\r\n\r\nvar Type,    // cyclic\r\n    Service,\r\n    Enum;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nNamespace._configure = function(Type_, Service_, Enum_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n    Enum    = Enum_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(37);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Parsed Options.\r\n     * @type {Array.<Object.<string,*>>|undefined}\r\n     */\r\n    this.parsedOptions = null;\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\r\n    if (!this.parsedOptions) {\r\n        this.parsedOptions = [];\r\n    }\r\n    var parsedOptions = this.parsedOptions;\r\n    if (propName) {\r\n        // If setting a sub property of an option then try to merge it\r\n        // with an existing option\r\n        var opt = parsedOptions.find(function (opt) {\r\n            return Object.prototype.hasOwnProperty.call(opt, name);\r\n        });\r\n        if (opt) {\r\n            // If we found an existing option - just merge the property value\r\n            var newValue = opt[name];\r\n            util.setProperty(newValue, propName, value);\r\n        } else {\r\n            // otherwise, create a new option, set it's property and add it to the list\r\n            opt = {};\r\n            opt[name] = util.setProperty({}, propName, value);\r\n            parsedOptions.push(opt);\r\n        }\r\n    } else {\r\n        // Always create a new option when setting the value of the option itself\r\n        var newOpt = {};\r\n        newOpt[name] = value;\r\n        parsedOptions.push(newOpt);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(37);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(34),\r\n    Root      = require(29),\r\n    Type      = require(35),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(33),\r\n    Method    = require(22),\r\n    types     = require(36),\r\n    util      = require(37);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var preferTrailingComment = options.preferTrailingComment || false;\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            if(typeof obj.comment !== \"string\") {\r\n              obj.comment = cmnt(); // try block-type comment\r\n            }\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\r\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(type, \"proto3_optional\");\r\n                    } else {\r\n                        parseField(type, \"optional\");\r\n                    }\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n\r\n        if (rule === \"proto3_optional\") {\r\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\r\n            var oneof = new OneOf(\"_\" + name);\r\n            field.setOption(\"proto3_optional\", true);\r\n            oneof.add(field);\r\n            parent.add(oneof);\r\n        } else {\r\n            parent.add(field);\r\n        }\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(type, \"proto3_optional\");\r\n                    } else {\r\n                        parseField(type, \"optional\");\r\n                    }\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        var option = name;\r\n        var propName;\r\n\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            option = name;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                propName = token.substr(1); //remove '.' before property name\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        var optionValue = parseOptionValue(parent, name);\r\n        setParsedOption(parent, option, optionValue, propName);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            var result = {};\r\n            while (!skip(\"}\", true)) {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                var value;\r\n                var propName = token;\r\n                if (peek() === \"{\")\r\n                    value = parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        value = parseOptionValue(parent, name + \".\" + token);\r\n                    else {\r\n                        value = readValue(true);\r\n                        setOption(parent, name + \".\" + token, value);\r\n                    }\r\n                }\r\n                var prevValue = result[propName];\r\n                if (prevValue)\r\n                    value = [].concat(prevValue).concat(value);\r\n                result[propName] = value;\r\n                skip(\",\", true);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        var simpleValue = readValue(true);\r\n        setOption(parent, name, simpleValue);\r\n        return simpleValue;\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function setParsedOption(parent, name, value, propName) {\r\n        if (parent.setParsedOption)\r\n            parent.setParsedOption(name, value, propName);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        // Get the comment of the preceding line now (if one exists) in case the\r\n        // method is defined across multiple lines.\r\n        var commentText = cmnt();\r\n\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        method.comment = commentText;\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                case \"optional\":\r\n                    /* istanbul ignore if */\r\n                    if (isProto3) {\r\n                        parseField(parent, \"proto3_optional\", reference);\r\n                    } else {\r\n                        parseField(parent, \"optional\", reference);\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup(buffer) {\r\n            return (Reader.create = function create_buffer(buffer) {\r\n                return util.Buffer.isBuffer(buffer)\r\n                    ? new BufferReader(buffer)\r\n                    /* istanbul ignore next */\r\n                    : create_array(buffer);\r\n            })(buffer);\r\n        }\r\n        /* istanbul ignore next */\r\n        : create_array;\r\n};\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = create();\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n    Reader.create = create();\r\n    BufferReader._configure();\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\nBufferReader._configure = function () {\r\n    /* istanbul ignore else */\r\n    if (util.Buffer)\r\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice\r\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\r\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n\r\nBufferReader._configure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    OneOf   = require(25),\r\n    util    = require(37);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n/**\r\n * Fetch content from file path or url\r\n * This method exists so you can override it with your own logic.\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.fetch = util.fetch;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Bundled definition existence checking\r\n    function getBundledFileName(filename) {\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common) return altname;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            self.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(32);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(39);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(37),\r\n    rpc    = require(31);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentAltRe = /^\\s*\\*?\\/*/,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source, alternateCommentMode) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false,\r\n        commentIsLeading = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @param {boolean} isLeading set if a leading comment\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end, isLeading) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        commentIsLeading = isLeading;\r\n        var lookback;\r\n        if (alternateCommentMode) {\r\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\r\n        } else {\r\n            lookback = 3;  // \"///\" or \"/**\"\r\n        }\r\n        var commentOffset = start - lookback,\r\n            c;\r\n        do {\r\n            if (--commentOffset < 0 ||\r\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i]\r\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\r\n                .trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    function isDoubleSlashCommentLine(startOffset) {\r\n        var endOffset = findEndOfLine(startOffset);\r\n\r\n        // see if remaining line matches comment pattern\r\n        var lineText = source.substring(startOffset, endOffset);\r\n        // look for 1 or 2 slashes since startOffset would already point past\r\n        // the first slash that started the comment.\r\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\r\n        return isComment;\r\n    }\r\n\r\n    function findEndOfLine(cursor) {\r\n        // find end of cursor's line\r\n        var endOffset = cursor;\r\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\r\n            endOffset++;\r\n        }\r\n        return endOffset;\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc,\r\n            isLeadingComment = offset === 0;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\") {\r\n                    isLeadingComment = true;\r\n                    ++line;\r\n                }\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length) {\r\n                    throw illegal(\"comment\");\r\n                }\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    if (!alternateCommentMode) {\r\n                        // check for triple-slash comment\r\n                        isDoc = charAt(start = offset + 1) === \"/\";\r\n\r\n                        while (charAt(++offset) !== \"\\n\") {\r\n                            if (offset === length) {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        ++offset;\r\n                        if (isDoc) {\r\n                            setComment(start, offset - 1, isLeadingComment);\r\n                        }\r\n                        ++line;\r\n                        repeat = true;\r\n                    } else {\r\n                        // check for double-slash comments, consolidating consecutive lines\r\n                        start = offset;\r\n                        isDoc = false;\r\n                        if (isDoubleSlashCommentLine(offset)) {\r\n                            isDoc = true;\r\n                            do {\r\n                                offset = findEndOfLine(offset);\r\n                                if (offset === length) {\r\n                                    break;\r\n                                }\r\n                                offset++;\r\n                            } while (isDoubleSlashCommentLine(offset));\r\n                        } else {\r\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\r\n                        }\r\n                        if (isDoc) {\r\n                            setComment(start, offset, isLeadingComment);\r\n                        }\r\n                        line++;\r\n                        repeat = true;\r\n                    }\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\r\n                    start = offset + 1;\r\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\") {\r\n                            ++line;\r\n                        }\r\n                        if (++offset === length) {\r\n                            throw illegal(\"comment\");\r\n                        }\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) {\r\n                        setComment(start, offset - 2, isLeadingComment);\r\n                    }\r\n                    repeat = true;\r\n                } else {\r\n                    return \"/\";\r\n                }\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\r\n                ret = commentIsLeading ? commentText : null;\r\n            }\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine) {\r\n                peek();\r\n            }\r\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\r\n                ret = commentIsLeading ? null : commentText;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(33),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(42),\r\n    util      = require(37),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(40),\r\n    converter = require(12),\r\n    wrappers  = require(41);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    return function (){\r\n        return function (p){\r\n            for (var i = 0, field; i < mtype.fieldsArray.length; i++){\r\n                if((field = mtype._fieldsArray[i]).map){\r\n                    this[field.name] = {};\r\n                }else if(field.repeated){\r\n                    this[field.name] = [];\r\n                }\r\n            }\r\n\r\n            if(p){\r\n                for (var  ks = Object.keys(p), j = 0; j < ks.length; ++j) {\r\n                    if (p[ks[j]] != null) {\r\n                        this[ks[j]] = p[ks[j]]\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(37);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(39);\r\n\r\nvar roots = require(30);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(35);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(15);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n\r\n/**\r\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {string} path dot '.' delimited path of the property to set\r\n * @param {Object} value the value to set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.setProperty = function setProperty(dst, path, value) {\r\n    function setProp(dst, path, value) {\r\n        var part = path.shift();\r\n        if (path.length > 0) {\r\n            dst[part] = setProp(dst[part] || {}, path, value);\r\n        } else {\r\n            var prevValue = dst[part];\r\n            if (prevValue)\r\n                value = [].concat(prevValue).concat(value);\r\n            dst[part] = value;\r\n        }\r\n        return dst;\r\n    }\r\n\r\n    if (typeof dst !== \"object\")\r\n        throw TypeError(\"dst must be an object\");\r\n    if (!path)\r\n        throw TypeError(\"path must be specified\");\r\n\r\n    path = path.split(\".\");\r\n    return setProp(dst, path, value);\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(29))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(38);\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(typeof global !== \"undefined\"\r\n                   && global\r\n                   && global.process\r\n                   && global.process.versions\r\n                   && global.process.versions.node);\r\n\r\n/**\r\n * Global object reference.\r\n * @memberof util\r\n * @type {Object}\r\n */\r\nutil.global = util.isNode && global\r\n           || typeof window !== \"undefined\" && window\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\nutil.copy = function(obj){\r\n    if(typeof obj != 'object'){\r\n        return obj;\r\n    }\r\n    var  newObj = {};\r\n    for (var  attr in obj) {\r\n        newObj[attr] = obj[attr];\r\n    }\r\n    return newObj;\r\n};\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(37);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(field, fieldIndex, ref, options){\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var _types = options.types;\r\n    if(field.resolvedType){\r\n        if(field.resolvedType instanceof Enum){\r\n            for(var k in field.resolvedType.values){\r\n                if(field.resolvedType.values[k]===ref) return ;\r\n            }\r\n            return invalid(field, \"enum value\");\r\n        }else {\r\n            var e = _types[fieldIndex].verify(ref);\r\n            if(e)\r\n                return field.name + \".\"+ e;\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\":\r\n                if (!util.isInteger(ref))\r\n                    return invalid(field, \"integer\");\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\":\r\n                if(!util.isInteger(ref)&&!(ref&&util.isInteger(ref.low)&&util.isInteger(ref.high)))\r\n                    return invalid(field, \"integer|Long\");\r\n                break;\r\n            case \"float\":\r\n            case \"double\":\r\n                if(typeof ref!==\"number\")\r\n                    return invalid(field, \"number\");\r\n                break;\r\n            case \"bool\":\r\n                if(typeof ref!==\"boolean\")\r\n                    return invalid(field, \"boolean\");\r\n                break;\r\n            case \"string\":\r\n                if(!util.isString(ref))\r\n                    return invalid(field, \"string\");\r\n                break;\r\n            case \"bytes\":\r\n                if(!(ref&&typeof ref.length===\"number\"||util.isString(ref)))\r\n                    return invalid(field, \"buffer\");\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch(field.keyType){\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if(!util.key32Re.test(ref))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if(!util.key64Re.test(ref))\r\n                return invalid(field, \"integer|Long key\");\r\n            break;\r\n        case \"bool\":\r\n            if(!util.key2Re.test(ref))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    return function (options){\r\n        return function (m){\r\n            var invalidDes;\r\n            if(typeof m !== 'object' || m === null)\r\n                return \"object expected\";\r\n\r\n            var oneofs = mtype.oneofsArray,\r\n                seenFirstField = {};\r\n            var p;\r\n            if(oneofs.length)\r\n                p = {};\r\n            for (var i = 0; i < mtype.fieldsArray.length; ++i){\r\n                var field = mtype._fieldsArray[i].resolve(),\r\n                    ref   = m[field.name];\r\n                if(!field.optional || (ref!=null&& m.hasOwnProperty(field.name))){\r\n                    var  _i;\r\n                    if (field.map){\r\n                        if(!util.isObject(ref))\r\n                            return invalid(field, \"object\");\r\n                        var k=Object.keys(ref);\r\n                        for (_i = 0; _i < k.length; ++_i){\r\n                            //检查key值的合法性\r\n                            invalidDes = genVerifyKey(field, k[_i]);\r\n                            if(invalidDes){\r\n                                return invalidDes;\r\n                            }\r\n                            //检查value值的合法性\r\n                            invalidDes = genVerifyValue(field, i, ref[k[_i]], options);\r\n                            if(invalidDes){\r\n                                return invalidDes;\r\n                            }\r\n                        }\r\n                    } else if(field.repeated){\r\n                        if(!Array.isArray(ref)){\r\n                            return invalid(field, \"array\");\r\n                        }\r\n\r\n                        for (_i = 0; _i < ref.length; ++_i) {\r\n                            invalidDes = genVerifyValue(field, i, ref[_i], options);\r\n                            if(invalidDes){\r\n                                return invalidDes;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if(field.partOf) {\r\n                            var  oneofPropName = field.partOf.name;\r\n                            if (seenFirstField[field.partOf.name] === 1)\r\n                                if(p[oneofPropName] === 1)\r\n                                    return field.partOf.name + \": multiple values\";\r\n                            p[oneofPropName] = 1\r\n                        }\r\n                        invalidDes = genVerifyValue(field, i, ref, options);\r\n                        if(invalidDes){\r\n                            return invalidDes;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(21);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n             // Only use fully qualified type name after the last '/'\r\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                if (type_url.indexOf(\"/\") === -1) {\r\n                    type_url = \"/\" + type_url;\r\n                }\r\n                return this.create({\r\n                    type_url: type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // Default prefix\r\n        var googleApi = \"type.googleapis.com/\";\r\n        var prefix = \"\";\r\n        var name = \"\";\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            // Separate the prefix used\r\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            var messageName = message.$type.fullName[0] === \".\" ?\r\n                message.$type.fullName.substr(1) : message.$type.fullName;\r\n            // Default to type.googleapis.com prefix if no prefix is used\r\n            if (prefix === \"\") {\r\n                prefix = googleApi;\r\n            }\r\n            name = prefix + messageName;\r\n            object[\"@type\"] = name;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup() {\r\n            return (Writer.create = function create_buffer() {\r\n                return new BufferWriter();\r\n            })();\r\n        }\r\n        /* istanbul ignore next */\r\n        : function create_array() {\r\n            return new Writer();\r\n        };\r\n};\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = create();\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n    Writer.create = create();\r\n    BufferWriter._configure();\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(42);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\nBufferWriter._configure = function () {\r\n    /**\r\n     * Allocates a buffer of the specified size.\r\n     * @function\r\n     * @param {number} size Buffer size\r\n     * @returns {Buffer} Buffer\r\n     */\r\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\r\n\r\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\r\n        ? function writeBytesBuffer_set(val, buf, pos) {\r\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n          // also works for plain array values\r\n        }\r\n        /* istanbul ignore next */\r\n        : function writeBytesBuffer_copy(val, buf, pos) {\r\n          if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n          else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n        };\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(BufferWriter.writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else if (buf.utf8Write)\r\n        buf.utf8Write(val, pos);\r\n    else\r\n        buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = util.Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n\r\nBufferWriter._configure();\r\n"],"sourceRoot":"."}